<% layout('layouts/boilerplate')%>
<div class="container  ps-0">
  <div class="row">
 <div class="col-3 p-0"><%- include('../partials/profileTabs') %></div>

 <div class="col-9 ">
      <h6 class="text-center mb-3">Change Your Profile Information</h6>
      <div class="row row-cols-1 row-cols-md-1 g-3 justify-content-center">

 
  <div class="col-md-6">
      <label class="form-label" for="firstName">First name</label>
      <input class="form-control" type="text" id="firstName" name="firstName" value="<%=currentUser.firstName%>" />
  </div>
  <div class="col-md-6">
      <label class="form-label" for="lastName">Last name</label>
      <input class="form-control" type="text" id="lastName" name="lastName" value="<%=currentUser.lastName%>" />
  </div>

  <div class="col-md-2">
    <label class="form-label" for="phoneCode">Phone code</label>
    <select class="form-select" id="phoneCode"
>
<% phoneCodeOptions.forEach(option => { %>
<option value="<%= option %>" <% if (option === currentUser.phoneCode) { %>selected<% } %>><%=option%></option>
<%}) %>
</select>
</div>
  <div class="col-md-5">
      <label class="form-label" for="phoneNumber">Phone number</label>
      <input class="form-control" type="text" id="phoneNumber" name="phoneNumber" value="<%=currentUser.phoneNumber%>" />
  </div>
  <div class="col-md-5">
    <label class="form-label" for="country">Select your country</label>
    <select
      class="form-select"
      id="country"
      name="address[country]"
    >
    <% countryOptions.forEach(option => { %>
      <option value="<%= option %>" <% if (option === currentUser.address.country) { %>selected<% } %>><%=option%></option>
      <%}) %>
    </select>
</div>

  <div class="col-md-6">
      <label class="form-label" for="username">Username</label>
      <input class="form-control" type="text" readonly disabled id="username" name="username" value="<%=currentUser.username%>" required />
  </div>
  <div class="col-md-6">
      <label class="form-label" for="email">Email address</label>
      <input class="form-control" type="email" readonly disabled id="email" name="email" value="<%=currentUser.email%>" required />
  </div>
  <div class="col-md-12">
    <% if (currentUser.isVerified) { %>
      <p><span class="text-success"><i class="bi bi-shield-fill-check"></i></span> Email is verified</p>
    <% } else { %>
      <p><span class="text-danger"><i class="bi bi-shield-fill-x"></i></span> Email is not verified</p>
      <p>Click <a id="verify-email" class="verify-email" href="#">here</a> to verify your email</p>
    <% } %>
  </div>
  


<!-- <div class="row row-cols-1 row-cols-md-2 g-3 justify-content-center">
  <div class="col-md-4">
      <label class="form-label" for="newpassword">New password</label>
      <input class="form-control" type="password" id="newpassword" name="" value="" />
  </div>
  <div class="col-md-4">
      <label class="form-label" for="repeatpassword">Repeat new password</label>
      <input class="form-control" type="password" id="repeatpassword" name="" value="" />
  </div>
</div> -->


    
  <div class="col-md-12 d-flex justify-content-between my-3">
      <button id="updateUserBtn" type="button" class="btn btn-warning">
        Save changes
      </button>
      <button id="deleteUserBtn" type="button" class="btn btn-danger">
        Delete account
      </button>
  </div>
</div>

<div class="row row-cols-1 row-cols-md-2 g-3 justify-content-center">
  <div class="col-md-12">
      <label class="form-label" for="avatar">Upload avatar</label>
      <input class="form-control" type="file" id="avatar" name="avatar" accept="image/png, image/jpeg, image/jpg" />
      
  </div>
  <div class="col-md-12 my-3">
    <button id="updateUserAvatarBtn" type="button" class="btn btn-warning">
      Save avatar
    </button>
  </div>
</div>

</div>
</div>
</div>
</div>

<script>
  const updateAccountAvatar = async (updatedData) => {
    try {
      const formData = new FormData();
      formData.append("avatar", updatedData.avatar);
  
      const response = await fetch("/user/profile/avatar", {
        method: "PUT",
        body: formData,
      });
  
      if (response.ok) {
        // Account updated successfully
        window.location.href = "/user/profile";
      } else {
        throw new Error("Failed to update account");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };
  
  const updateUserAvatarBtn = document.querySelector("#updateUserAvatarBtn");
  updateUserAvatarBtn.addEventListener("click", async () => {
    const avatarInput = document.querySelector("#avatar");
    const updatedData = {
      avatar: avatarInput.files[0],
    };
    console.log('updatedData', updatedData)
  
    await updateAccountAvatar(updatedData);
  });
  
</script>

<script>
  const updateAccount = async (updatedData) => {
    try {
      const response = await fetch("/user/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedData),
      });
  
      if (response.ok) {
        const responseData = await response.json();
        if (responseData.success) {
          // Account updated successfully
          // Redirect or perform desired actions here
          window.location.href = "/user/profile";
        } else {
          throw new Error("Failed to update account");
        }
      } else {
        throw new Error("Failed to update account");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };
  
  const updateUserBtn = document.querySelector("#updateUserBtn");
  updateUserBtn.addEventListener("click", async () => {
    const firstName = document.querySelector("#firstName").value;
    const lastName = document.querySelector("#lastName").value;
    const phoneCode = document.querySelector("#phoneCode").value;
    const phoneNumber = document.querySelector("#phoneNumber").value;
    const country = document.querySelector("#country").value;
    console.log(country)
  
    const updatedData = { firstName, lastName, phoneCode, phoneNumber, country };
    await updateAccount(updatedData);
  });
  
</script>
<script>
  ////////// DELETE
  const deleteUser = async () => {
    try {
      const confirmed = confirm("Are you sure you want to delete your account?");

      if (confirmed) {
        const response = await fetch("/user/profile", {
          method: "DELETE",
        });

        if (response.ok) {
          // User deleted successfully
          // Redirect to a landing page or any other appropriate page
          window.location.href = "/";
        } else {
          throw new Error("Failed to delete account");
        }
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };

  // Get the delete button element
  const deleteBtn = document.querySelector("#deleteUserBtn");

  // Add event listener to the button click event
  deleteBtn.addEventListener("click", async () => {
    // Call the deleteUser function to initiate the deletion process
    await deleteUser();
  });
</script>

<script>
const emailVerificationLink = async () => {
  try {

    const url = `/auth/verificationlink`;
    console.log(url)
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      console.log('Email verification link sent successfully');
      console.log(response);
      // Handle the response from the server if needed
      // The compare page will be rendered in the response handler of the compare controller
      window.location.href = url;
    } else {
      throw new Error('Failed to send email verification');
    }
  } catch (error) {
    console.error(error);
    // Handle error and display appropriate message
  }
};

const verifyEmail = document.querySelector('#verify-email')
verifyEmail.addEventListener('click', async (e)=> {
  e.preventDefault()
  await emailVerificationLink()
  console.log(verifyEmail)
})

</script>