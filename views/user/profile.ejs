<% layout('layouts/boilerplate')%>
<div class="container" >
  <div class="row" >
 <div class="col-lg-12"><%- include('../partials/profileTabs') %>
</div>

<style>
  .avatar-container {
    position: sticky;
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
  }
  .avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: #adb5bd;
    display: flex;
    justify-content: center;
    align-items: center;
    /* bord
    er: 2px solid #343a40;  */
  }
  
  .avatar img {
    max-width: 100%;
    max-height: 100%;
    border-radius: 50%;
  }

</style>

 <div class="col-lg-12 ">
      <h6 class="text-center mb-3"><%=profilePage.titles.section1%></h6>

      <div class="col-md-12 d-flex flex-column avatar-container">
          <div class="avatar"> 
            <!-- <img src="https://via.placeholder.com/150" alt="Avatar" /> -->
          
            <% if (currentUser.avatar.length > 0) { %>
              <img src="<%= currentUser.avatar[0].url %>" id="avatarPreview" alt="Avatar" />
              <% } else { %>
              <img src="/images/icons/user.png" id="avatarPreview" alt="Avatar Placeholder" />
              <% } %>
          </div>

          <div class="row row-cols-2 row-cols-md-2 justify-content-center my-3">
            <div class="col-md-6">
                <label class="form-label btn btn-warning btn-sm" for="avatarInput" style="white-space: nowrap;"><i class="bi bi-upload"></i> <%=profilePage.labels.uploadAvatar%></label>
                <input class="form-control d-none" type="file"id="avatarInput"  name="avatar" accept="image/png, image/jpeg, image/jpg" />
                
            </div>
            <div class="col-md-6 ">
              <button id="updateUserAvatarBtn" type="button" class="btn btn-warning btn-sm" style="white-space: nowrap;">
                <i class="bi bi-sd-card"></i> <%=profilePage.buttons.saveAvatar%>
              </button>
            </div>
          </div>
      </div>



      <div class="row row-cols-1 row-cols-md-1 g-3 justify-content-center">

 
  <div class="col-md-6">
      <label class="form-label" for="firstName"><%=profilePage.labels.firstName%></label>
      <input class="form-control" type="text" id="firstName" name="firstName" value="<%=currentUser.firstName%>" />
  </div>
  <div class="col-md-6">
      <label class="form-label" for="lastName"><%=profilePage.labels.lastName%></label>
      <input class="form-control" type="text" id="lastName" name="lastName" value="<%=currentUser.lastName%>" />
  </div>

  <div class="col-md-2">
    <label class="form-label" for="phoneCode"><%=profilePage.labels.phoneCode%></label>
    <select class="form-select" id="phoneCode"
>
<% phoneCodeOptions.forEach(option => { %>
<option value="<%= option %>" <% if (option === currentUser.phoneCode) { %>selected<% } %>><%=option%></option>
<%}) %>
</select>
</div>
  <div class="col-md-5">
      <label class="form-label" for="phoneNumber"><%=profilePage.labels.phoneNumber%></label>
      <input class="form-control" type="text" id="phoneNumber" name="phoneNumber" value="<%=currentUser.phoneNumber%>" />
  </div>
  <div class="col-md-5">
    <label class="form-label" for="country"><%=profilePage.labels.selectYourCountry%></label>
    <select
      class="form-select"
      id="country"
      name="address[country]"
    >
    <% countryOptions.forEach(option => { %>
      <option value="<%= option %>" <% if (option === currentUser.address.country) { %>selected<% } %>><%=option%></option>
      <%}) %>
    </select>
</div>

  <div class="col-md-6">
      <label class="form-label" for="username"><%=profilePage.labels.username%></label>
      <input class="form-control" type="text" readonly disabled id="username" name="username" value="<%=currentUser.username%>" required />
  </div>
  <div class="col-md-6">
      <label class="form-label" for="email"><%=profilePage.labels.emailAddress%></label>
      <input class="form-control" type="email" readonly disabled id="email" name="email" value="<%=currentUser.email%>" required />
  </div>
  <div class="col-md-12">
    <% if (currentUser.isVerified) { %>
      <p><span class="text-success"><i class="bi bi-shield-fill-check"></i></span> <%=profilePage.descriptions.emailIsVerified%></p>
    <% } else { %>
      <p><span class="text-danger"><i class="bi bi-shield-fill-x"></i></span> <%=profilePage.descriptions.emailIsNotVerified%></p>
      <p><%=profilePage.descriptions.click%> <a id="verify-email" class="verify-email" href="#"><%=profilePage.descriptions.here%></a><%=profilePage.descriptions.toVerify%></p>
    <% } %>
  </div>
  


<!-- <div class="row row-cols-1 row-cols-md-2 g-3 justify-content-center">
  <div class="col-md-4">
      <label class="form-label" for="newpassword">New password</label>
      <input class="form-control" type="password" id="newpassword" name="" value="" />
  </div>
  <div class="col-md-4">
      <label class="form-label" for="repeatpassword">Repeat new password</label>
      <input class="form-control" type="password" id="repeatpassword" name="" value="" />
  </div>
</div> -->


    
  <div class="col-lg-12">
      <button id="updateUserBtn" type="button" class="btn btn-warning">
        <%=profilePage.buttons.saveChanges%>
      </button>
     
  </div>



</div>




<div class="row row-cols-1 row-cols-md-2 g-3 justify-content-center mt-3">
<div class="col-md-12">
  <h6 class="text-center mb-3"><%=profilePage.titles.section2%></h6>
  <div class="row row-cols-1 row-cols-md-1 g-3 justify-content-center">

<div class="col-md-12">
      <label class="form-label" for="language"><%=profilePage.labels.preferredLanguage%></label>
      <select class="form-select text-uppercase" id="language" >
        <% languageOptions.forEach(option => { %>
          <option value="<%= option %>" <% if (option === currentUser.language) { %>selected<% } %>><%=option%></option>
          <%}) %>
      </select>
    </div>

<!-- <div class="col-md-12">
<label for="notificationDistance" class="form-label"
  >Maximum distance</label
>
<input
  type="range"
  class="form-range"
  min="0"
  max="5"
  step="0.5"
  id="notificationDistance"
  disabled
/>
</div> -->

<!-- <div class="col-md-8">
<input
  class="form-check-input"
  type="checkbox"
  id="receiveNotifications"
  name="receiveNotifications"
  value=""
/>
<label class="form-check-label" for="receiveNotifications"
  >Receive push notifications</label
>
</div> -->




<div class="col-md-12 d-flex">
<div class="form-check me-3">
  <input
    class="form-check-input"
    type="radio"
    name="theme"
    id="darkTheme"
    value="dark"
  />
  <label class="form-check-label" for="darkTheme"> <%=profilePage.labels.darkTheme%> </label>
</div>
<div class="form-check me-3">
  <input
    class="form-check-input"
    type="radio"
    name="theme"
    id="lightTheme"
    value="light"
    checked
  />
  <label class="form-check-label" for="lightTheme"> <%=profilePage.labels.lightTheme%> </label>
</div>
</div>
<div class="col-md-12">
  <!-- web push -->
  <div class="onesignal-customlink-container"></div>
  </div>
  
  <!-- <div class="col-md-12 mb-3">
  <input
    class="form-check-input"
    type="checkbox"
    id="receiveUpdates"
    name="receiveUpdates"
    value=""
    disabled
  />
  <label class="form-check-label" for="receiveUpdates"
    >Receive updates and newsletters</label
  >
  </div> -->


<div class="col-md-12 my-5">
<button id="updateUserSettingsBtn" type="button" class="btn btn-warning">
  <%=profilePage.buttons.saveChanges%>
</button>
</div>
</div>

</div>

</div>





</div>


<div class="col-lg-12 alert alert-danger" role="alert">
  <div><p style="text-align: justify;"><%=profilePage.descriptions.byClicking%> <span class="fw-bold">'<%=profilePage.buttons.deleteAccount%>'</span>, <%=profilePage.descriptions.permanentlyRemove%></p>  </div>
  <button id="deleteUserBtn" type="button" class="btn btn-danger">
    <%=profilePage.buttons.deleteAccount%>
  </button>
</div>



</div>
</div>

<script>
  const updateAccountAvatar = async (updatedData) => {
    try {
      const formData = new FormData();
      formData.append("avatar", updatedData.avatar);

      const response = await fetch("/user/profile/avatar", {
        method: "PUT",
        body: formData,
      });

      if (response.ok) {
        // Account updated successfully
        window.location.href = "/user/profile";
      } else {
        throw new Error("Failed to update account");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };

  const avatarInput = document.querySelector("#avatarInput");
  const avatarPreview = document.querySelector("#avatarPreview");

  avatarInput.addEventListener("change", () => {
    if (avatarInput.files && avatarInput.files[0]) {
      const reader = new FileReader();

      reader.onload = (e) => {
        avatarPreview.src = e.target.result;
      };

      reader.readAsDataURL(avatarInput.files[0]);
    }
  });

  const updateUserAvatarBtn = document.querySelector("#updateUserAvatarBtn");
  updateUserAvatarBtn.addEventListener("click", async () => {
    const updatedData = {
      avatar: avatarInput.files[0],
    };

    await updateAccountAvatar(updatedData);
  });
</script>
<!-- <script>
  const updateAccountAvatar = async (updatedData) => {
    try {
      const formData = new FormData();
      formData.append("avatar", updatedData.avatar);
  
      const response = await fetch("/user/profile/avatar", {
        method: "PUT",
        body: formData,
      });
  
      if (response.ok) {
        // Account updated successfully
        window.location.href = "/user/profile";
      } else {
        throw new Error("Failed to update account");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };
  
  const updateUserAvatarBtn = document.querySelector("#updateUserAvatarBtn");
  updateUserAvatarBtn.addEventListener("click", async () => {
    const avatarInput = document.querySelector("#avatar");
    const updatedData = {
      avatar: avatarInput.files[0],
    };
    console.log('updatedData', updatedData)
  
    await updateAccountAvatar(updatedData);
  });
  
</script> -->

<script>
  const updateAccount = async (updatedData) => {
    try {
      const response = await fetch("/user/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedData),
      });
  
      if (response.ok) {
        const responseData = await response.json();
        if (responseData.success) {
          // Account updated successfully
          // Redirect or perform desired actions here
          window.location.href = "/user/profile";
        } else {
          throw new Error("Failed to update account");
        }
      } else {
        throw new Error("Failed to update account");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };
  
  const updateUserBtn = document.querySelector("#updateUserBtn");
  updateUserBtn.addEventListener("click", async () => {
    const firstName = document.querySelector("#firstName").value;
    const lastName = document.querySelector("#lastName").value;
    const phoneCode = document.querySelector("#phoneCode").value;
    const phoneNumber = document.querySelector("#phoneNumber").value;
    const country = document.querySelector("#country").value;
    console.log(country)
  
    const updatedData = { firstName, lastName, phoneCode, phoneNumber, country };
    await updateAccount(updatedData);
  });
  
</script>
<script>
  ////////// DELETE
  const deleteUser = async () => {
    try {
      const confirmed = confirm("Are you sure you want to delete your account?");

      if (confirmed) {
        const response = await fetch("/user/profile", {
          method: "DELETE",
        });

        if (response.ok) {
          // User deleted successfully
          // Redirect to a landing page or any other appropriate page
          window.location.href = "/";
        } else {
          throw new Error("Failed to delete account");
        }
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };

  // Get the delete button element
  const deleteBtn = document.querySelector("#deleteUserBtn");

  // Add event listener to the button click event
  deleteBtn.addEventListener("click", async () => {
    // Call the deleteUser function to initiate the deletion process
    await deleteUser();
  });
</script>

<script>
const emailVerificationLink = async () => {
  try {

    const url = `/auth/verificationlink`;
    console.log(url)
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      console.log('Email verification link sent successfully');
      console.log(response);
      // Handle the response from the server if needed
      // The compare page will be rendered in the response handler of the compare controller
      window.location.href = url;
    } else {
      throw new Error('Failed to send email verification');
    }
  } catch (error) {
    console.error(error);
    // Handle error and display appropriate message
  }
};

const verifyEmail = document.querySelector('#verify-email')
verifyEmail.addEventListener('click', async (e)=> {
  e.preventDefault()
  await emailVerificationLink()
  console.log(verifyEmail)
})

</script>

<!-- new script -->
<script>
  const updateAccountSettings = async (updatedData) => {
    try {
      const response = await fetch("/user/profile/settings", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedData),
      });

      if (response.ok) {
       // const responseData = await response.json();
      //  if (responseData.success) {
          // Account updated successfully
          // Redirect or perform desired actions here
          window.location.href = "/user/profile";
      //  } else {
      //    throw new Error("Failed to update account settings");
      //  }
      } else {
        throw new Error("Failed to update account settings");
      }
    } catch (err) {
      console.error(err);
      // Handle error and display appropriate message
    }
  };

  const updateUserSettingsBtn = document.querySelector(
    "#updateUserSettingsBtn"
  );
  updateUserSettingsBtn.addEventListener("click", async () => {
    //const firstName = document.querySelector("#firstName").value;
    //const lastName = document.querySelector("#lastName").value;
    //const phoneCode = document.querySelector("#phoneCode").value;
    //const phoneNumber = document.querySelector("#phoneNumber").value;
    const language = document.querySelector("#language").value;
    console.log(language);

    const updatedData = { language };
    await updateAccountSettings(updatedData);
  });
</script>
